function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { Fragment, useMemo } from "react";
import { useAddonState, useChannel, useGlobals, useParameter } from "@storybook/api";
import { styled } from "@storybook/theming";
import { Icons, IconButton, WithTooltip, TooltipLinkList } from "@storybook/components";
import { PARAM_KEY, THEME_SWITCHER_ID, THEMING_EVENTS, DEFAULT_ADDON_STATE, DEFAULT_THEME_PARAMETERS } from "../constants";
var IconButtonLabel = styled.div(function (_ref) {
  var theme = _ref.theme;
  return {
    fontSize: theme.typography.size.s2 - 1,
    marginLeft: 10
  };
});

var hasMultipleThemes = function hasMultipleThemes(themesList) {
  return themesList.length > 1;
};

export var ThemeSwitcher = function ThemeSwitcher() {
  var _useParameter = useParameter(PARAM_KEY, DEFAULT_THEME_PARAMETERS),
      themeOverride = _useParameter.themeOverride;

  var _useGlobals = useGlobals(),
      _useGlobals2 = _slicedToArray(_useGlobals, 2),
      selected = _useGlobals2[0].theme,
      updateGlobals = _useGlobals2[1];

  var _useAddonState = useAddonState(THEME_SWITCHER_ID, DEFAULT_ADDON_STATE),
      _useAddonState2 = _slicedToArray(_useAddonState, 2),
      _useAddonState2$ = _useAddonState2[0],
      themesList = _useAddonState2$.themesList,
      themeDefault = _useAddonState2$.themeDefault,
      updateState = _useAddonState2[1];

  useChannel(_defineProperty({}, THEMING_EVENTS.REGISTER_THEMES, function (_ref2) {
    var themes = _ref2.themes,
        defaultTheme = _ref2.defaultTheme;
    updateState(function (state) {
      return _objectSpread(_objectSpread({}, state), {}, {
        themesList: themes,
        themeDefault: defaultTheme
      });
    });
  }));
  var label = useMemo(function () {
    if (themeOverride) {
      return "Story override";
    }

    var themeName = selected || themeDefault;
    return themeName && "".concat(themeName, " theme");
  }, [themeOverride, themeDefault, selected]);
  return hasMultipleThemes(themesList) && /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(WithTooltip, {
    placement: "top",
    trigger: "click",
    closeOnClick: true,
    tooltip: function tooltip(_ref3) {
      var onHide = _ref3.onHide;
      return /*#__PURE__*/React.createElement(TooltipLinkList, {
        links: themesList.map(function (theme) {
          return {
            id: theme,
            title: theme,
            active: selected === theme,
            onClick: function onClick() {
              updateGlobals({
                theme: theme
              });
              onHide();
            }
          };
        })
      });
    }
  }, /*#__PURE__*/React.createElement(IconButton, {
    key: THEME_SWITCHER_ID,
    active: !themeOverride,
    title: "Theme"
  }, /*#__PURE__*/React.createElement(Icons, {
    icon: "paintbrush"
  }), label && /*#__PURE__*/React.createElement(IconButtonLabel, null, label))));
};