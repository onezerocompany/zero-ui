function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React from "react";
import { useMemo } from "@storybook/addons";
import { initializeThemeState, pluckThemeFromContext, useThemeParameters } from "./helpers";

var pluckThemeFromKeyPairTuple = function pluckThemeFromKeyPairTuple(_ref) {
  var _ref2 = _slicedToArray(_ref, 2),
      _ = _ref2[0],
      themeConfig = _ref2[1];

  return themeConfig;
};

export var withThemeFromJSXProvider = function withThemeFromJSXProvider(_ref3) {
  var Provider = _ref3.Provider,
      GlobalStyles = _ref3.GlobalStyles,
      defaultTheme = _ref3.defaultTheme,
      _ref3$themes = _ref3.themes,
      themes = _ref3$themes === void 0 ? {} : _ref3$themes;
  var themeNames = Object.keys(themes);
  initializeThemeState(themeNames, defaultTheme || themeNames[0]);
  return function (storyFn, context) {
    var _useThemeParameters = useThemeParameters(),
        themeOverride = _useThemeParameters.themeOverride;

    var selected = pluckThemeFromContext(context);
    var theme = useMemo(function () {
      var selectedThemeName = themeOverride || selected || defaultTheme;
      var pairs = Object.entries(themes);
      return pairs.length === 1 ? pluckThemeFromKeyPairTuple(pairs[0]) : themes[selectedThemeName];
    }, [themes, selected, themeOverride]);
    var ProviderComponent = Provider || React.Fragment;
    return /*#__PURE__*/React.createElement(ProviderComponent, {
      theme: theme
    }, GlobalStyles && /*#__PURE__*/React.createElement(GlobalStyles, null), storyFn());
  };
};