/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface ContainerSection {
    }
    interface InputsSection {
    }
    interface TypographySection {
    }
    interface ZeroBar {
        "elevation": number;
        "titleText"?: string;
    }
    interface ZeroContainer {
        "background": string;
        "backgroundBlur": number;
        "cornerRadius": number;
        "direction": string;
        "edge": number;
        "edgeGlow": number;
        "elevation": number;
        "glow": number;
        "neu": number;
        "padding": number;
        "shadow": number;
        "spacing": number;
    }
    interface ZeroDivider {
        "colors": string;
        "opacity": number;
        "spacing": number;
        "thickness": number;
    }
    interface ZeroGrid {
        "minWidth": string;
        "spacing": number;
    }
    interface ZeroHeader {
        "backgroundImage"?: string;
        "backgroundOpacity": number;
        "backgroundVideo"?: string;
        "subtitleText": string;
        "titleText": string;
    }
    interface ZeroInput {
        "label": string;
        "max": number;
        "min": number;
        "name": string;
        "placeholder": string;
        "step": number;
        "type": string;
        "value": string;
        "valueTemplate": string;
    }
    interface ZeroScaffold {
    }
    interface ZeroSection {
        "colors": string;
        "sectionTitle": string;
    }
    interface ZeroText {
        "color": string;
        "gradient": boolean;
        "gradientColors": string;
        "textStyle": string;
        "uppercase": boolean;
    }
}
declare global {
    interface HTMLContainerSectionElement extends Components.ContainerSection, HTMLStencilElement {
    }
    var HTMLContainerSectionElement: {
        prototype: HTMLContainerSectionElement;
        new (): HTMLContainerSectionElement;
    };
    interface HTMLInputsSectionElement extends Components.InputsSection, HTMLStencilElement {
    }
    var HTMLInputsSectionElement: {
        prototype: HTMLInputsSectionElement;
        new (): HTMLInputsSectionElement;
    };
    interface HTMLTypographySectionElement extends Components.TypographySection, HTMLStencilElement {
    }
    var HTMLTypographySectionElement: {
        prototype: HTMLTypographySectionElement;
        new (): HTMLTypographySectionElement;
    };
    interface HTMLZeroBarElement extends Components.ZeroBar, HTMLStencilElement {
    }
    var HTMLZeroBarElement: {
        prototype: HTMLZeroBarElement;
        new (): HTMLZeroBarElement;
    };
    interface HTMLZeroContainerElement extends Components.ZeroContainer, HTMLStencilElement {
    }
    var HTMLZeroContainerElement: {
        prototype: HTMLZeroContainerElement;
        new (): HTMLZeroContainerElement;
    };
    interface HTMLZeroDividerElement extends Components.ZeroDivider, HTMLStencilElement {
    }
    var HTMLZeroDividerElement: {
        prototype: HTMLZeroDividerElement;
        new (): HTMLZeroDividerElement;
    };
    interface HTMLZeroGridElement extends Components.ZeroGrid, HTMLStencilElement {
    }
    var HTMLZeroGridElement: {
        prototype: HTMLZeroGridElement;
        new (): HTMLZeroGridElement;
    };
    interface HTMLZeroHeaderElement extends Components.ZeroHeader, HTMLStencilElement {
    }
    var HTMLZeroHeaderElement: {
        prototype: HTMLZeroHeaderElement;
        new (): HTMLZeroHeaderElement;
    };
    interface HTMLZeroInputElement extends Components.ZeroInput, HTMLStencilElement {
    }
    var HTMLZeroInputElement: {
        prototype: HTMLZeroInputElement;
        new (): HTMLZeroInputElement;
    };
    interface HTMLZeroScaffoldElement extends Components.ZeroScaffold, HTMLStencilElement {
    }
    var HTMLZeroScaffoldElement: {
        prototype: HTMLZeroScaffoldElement;
        new (): HTMLZeroScaffoldElement;
    };
    interface HTMLZeroSectionElement extends Components.ZeroSection, HTMLStencilElement {
    }
    var HTMLZeroSectionElement: {
        prototype: HTMLZeroSectionElement;
        new (): HTMLZeroSectionElement;
    };
    interface HTMLZeroTextElement extends Components.ZeroText, HTMLStencilElement {
    }
    var HTMLZeroTextElement: {
        prototype: HTMLZeroTextElement;
        new (): HTMLZeroTextElement;
    };
    interface HTMLElementTagNameMap {
        "container-section": HTMLContainerSectionElement;
        "inputs-section": HTMLInputsSectionElement;
        "typography-section": HTMLTypographySectionElement;
        "zero-bar": HTMLZeroBarElement;
        "zero-container": HTMLZeroContainerElement;
        "zero-divider": HTMLZeroDividerElement;
        "zero-grid": HTMLZeroGridElement;
        "zero-header": HTMLZeroHeaderElement;
        "zero-input": HTMLZeroInputElement;
        "zero-scaffold": HTMLZeroScaffoldElement;
        "zero-section": HTMLZeroSectionElement;
        "zero-text": HTMLZeroTextElement;
    }
}
declare namespace LocalJSX {
    interface ContainerSection {
    }
    interface InputsSection {
    }
    interface TypographySection {
    }
    interface ZeroBar {
        "elevation"?: number;
        "titleText"?: string;
    }
    interface ZeroContainer {
        "background"?: string;
        "backgroundBlur"?: number;
        "cornerRadius"?: number;
        "direction"?: string;
        "edge"?: number;
        "edgeGlow"?: number;
        "elevation"?: number;
        "glow"?: number;
        "neu"?: number;
        "padding"?: number;
        "shadow"?: number;
        "spacing"?: number;
    }
    interface ZeroDivider {
        "colors"?: string;
        "opacity"?: number;
        "spacing"?: number;
        "thickness"?: number;
    }
    interface ZeroGrid {
        "minWidth"?: string;
        "spacing"?: number;
    }
    interface ZeroHeader {
        "backgroundImage"?: string;
        "backgroundOpacity"?: number;
        "backgroundVideo"?: string;
        "subtitleText"?: string;
        "titleText"?: string;
    }
    interface ZeroInput {
        "label"?: string;
        "max"?: number;
        "min"?: number;
        "name"?: string;
        "placeholder"?: string;
        "step"?: number;
        "type"?: string;
        "value"?: string;
        "valueTemplate"?: string;
    }
    interface ZeroScaffold {
    }
    interface ZeroSection {
        "colors"?: string;
        "sectionTitle": string;
    }
    interface ZeroText {
        "color"?: string;
        "gradient"?: boolean;
        "gradientColors"?: string;
        "textStyle"?: string;
        "uppercase"?: boolean;
    }
    interface IntrinsicElements {
        "container-section": ContainerSection;
        "inputs-section": InputsSection;
        "typography-section": TypographySection;
        "zero-bar": ZeroBar;
        "zero-container": ZeroContainer;
        "zero-divider": ZeroDivider;
        "zero-grid": ZeroGrid;
        "zero-header": ZeroHeader;
        "zero-input": ZeroInput;
        "zero-scaffold": ZeroScaffold;
        "zero-section": ZeroSection;
        "zero-text": ZeroText;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "container-section": LocalJSX.ContainerSection & JSXBase.HTMLAttributes<HTMLContainerSectionElement>;
            "inputs-section": LocalJSX.InputsSection & JSXBase.HTMLAttributes<HTMLInputsSectionElement>;
            "typography-section": LocalJSX.TypographySection & JSXBase.HTMLAttributes<HTMLTypographySectionElement>;
            "zero-bar": LocalJSX.ZeroBar & JSXBase.HTMLAttributes<HTMLZeroBarElement>;
            "zero-container": LocalJSX.ZeroContainer & JSXBase.HTMLAttributes<HTMLZeroContainerElement>;
            "zero-divider": LocalJSX.ZeroDivider & JSXBase.HTMLAttributes<HTMLZeroDividerElement>;
            "zero-grid": LocalJSX.ZeroGrid & JSXBase.HTMLAttributes<HTMLZeroGridElement>;
            "zero-header": LocalJSX.ZeroHeader & JSXBase.HTMLAttributes<HTMLZeroHeaderElement>;
            "zero-input": LocalJSX.ZeroInput & JSXBase.HTMLAttributes<HTMLZeroInputElement>;
            "zero-scaffold": LocalJSX.ZeroScaffold & JSXBase.HTMLAttributes<HTMLZeroScaffoldElement>;
            "zero-section": LocalJSX.ZeroSection & JSXBase.HTMLAttributes<HTMLZeroSectionElement>;
            "zero-text": LocalJSX.ZeroText & JSXBase.HTMLAttributes<HTMLZeroTextElement>;
        }
    }
}
